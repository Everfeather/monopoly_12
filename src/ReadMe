ReadMe

Team 12 - Monopoly term project

Authors:

Daniel Wang
Giancarlo Salvador
Robbie Kuhn
Spencer Antliff


Milestone Overview

Milestone 1:
-A command line based version of monopoly simplified to only contain basic functionality of the game.
    This functionality includes rolling of the dice, moving around the board, switching turns between players,
    buying properties, paying rent and going bankrupt.

Milestone 2:
- A GUI based version of milestone 1. This milestone also includes unit testing of the game.

Milestone 3:
- Adding additional features to the game like houses, hotels, special properties like go, go to jail, jail,
    railroads and utilities. IN addition the addition of AI players will be added so the user can play against
    AI players if they dont have enough players.

Milestone 4:
-In this final milestone a save/ load functionality will be added to the game as well as international versions
    of the game with different names and properties.



Milestone 1:
As this is the first milestone we have designed and implemented the entirety of the current code base for this
milestone. We have written all files and produced a working CLI game.

Milestone 2:
In this milestone we needed to add a GUI to play the game with. We did this using java swing. On the left we have the
gameBoard and on the right are the player panels along with the action buttons, roll, buy, init game and next turn. We
wrote all files in java and have produced a working gui. One known issue is sizing and colouring doesnt function well on
Mac. This is a known Java Swing issue.

Milestone 3:
In this milestone we needed to add special properties such as railroads, utilities, tax, go and jail. We did this with
java swing as well as java backend coding. railroads and utilities are now purchasable properties, landing on tax forces
you to pay taxes and going to jail and bing in jail are both functioning events now. We also had to add bots to the game
so that people can play by themselves and against the bots if they dont have other humans to play with.

Milestone 4:
In this milestone we needed to add save/ load features, we used JSON so save and load the game and XML with a SAX
parser to have multiple game versions. We have 2 game versions, canadian board and a classic board. We added testing
for all of these new features,fixed issues from M3 and added the new features. You can now save a game and load it
to continue playing later.

KNOWN BUGS:
after loading the game the bots do not act as expected, we are unsure reason for this issue. Potentially an issue with
the counter in the nextTurn() func in the model. We preformed extensive debugging and were unable to fix the issue.




