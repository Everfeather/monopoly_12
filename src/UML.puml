@startuml

skinparam classAttributeIconSize 0

enum Piece{
    -HORSE,SHOE,CAR,BOAT
}

enum PropertyType{
    -BROWN,LIGHTBLUE,PINK,ORANGE,RED,YELLOW,GREEN,BLUE,RAILROAD,UTILITY
}

enum SquareType{
    -PROPERTY,GO,FREEPARKING,JAIL,GOTOJAIL,TAX,EMPTY
}

class Dice {
    - {static} MAX: int = 6
    - {static} MIN: int = 1
    - rollValue: int
    - rand: Random
    - roll_double: boolean
    - numDoublesRolled: int
    - dice: int[]

    + Dice():
    + getDiceValues(): int[]
    + getRollValue(): int
    + setRollValue(int):
    + getRollDouble(): boolean
    + setRollDouble(boolean):
    + triple_roll: boolean
    + getNumDoublesRolled(): int
    + rollDice():
}

class GameController {
    - model: GameModel
    - {static} ROLL: String
    - {static} BUY: String
    - {static} INIT: String
    - {static} NEXT_TURN: String
    - {static} ADD_BOT: String
    - {static} REMOVE_BOT: String
    - {static} BAILOUT: String
    - {static} ROLL_DOUBLE: String
    - {static} ORIGINAL_V: String
    - {static} CANADIAN_V: String
    + GameController():
    + actionPerformed(ActionEvent):
}

class PropertyPanel {
    - property: GameBoardSquare
    - propertyInfoPopUp: JButton
    - propertyDescription: String
    - propertyInfo: JTextArea
    + PropertyPanel(Property):
    + setPropertyDescription(String): void
    + getPropertyInfoPopUp(): JButton
    + getProperty(): GameBoardSquare
    + getInfoArea(): JTextArea
    + getInfoButton(): JButton
}

class MonopolyEvent {
    - type: EventType
    - property: Property

    + MonopolyEvent(GameModel, EventType)
    + MonopolyEvent(GameModel, EventType, Property)
    + getProperty(): Property
    + getEvent(): EventType
}

class SpecialSquare {
    + SpecialSquare(String, SquareType):
    + SpecialSquare():
}

class Player {
    - playerPiece: Piece
    - balance: int
    - properties: HashMap<Property,PropertyType>
    - currentPos: int
    - inJail: boolean
    - turnsInJail: int
    - bankrupt: boolean
    - isBot: boolean

    + Player(Piece, int):
    + getPlayerPiece(): Piece
    + setPlayerPiece(Piece): void
    + getBalance(): int
    + increaseBalance(int): void
    + decreaseBalance(int): void
    + getProperties(): HashMap<Property,PropertyType>
    + getCurrentPos(): int
    + setCurrentPos(int): void
    + getInJail(): boolean
    + setInJail(boolean): void
    + getTurnsInJail(): int
    + setTurnsInJail(int): void
    + isBankrupt(): boolean
    + setBankrupt(boolean): void
    + hasPropertySet(Property): boolean
    + containsAPropertySet()
    + addProperty(Property): void
    + toString(): String
    + isBankrupt(): void
    + payRent(Player,Property): void
    + payRent(Player,Property, int): void
    + isBot(): boolean
    + setBot(boolean):
}

abstract class GameBoardSquare {
    - type: SquareType
    - name: String
    - playersOnSquare: List<Player>

    + GameBoardSquare(SquareType, String):
    + initPlayersOnSquare():
    + getPlayersOnSquare(): List<Player>
    + addPlayerToSquare(Player): void
    + removePlayerFromSquare(Player): void
    + setType(SquareType):
    + getType(): SquareType
    + setName(String):
    + getName(): String
    + toString(): String
    + equals(Object): boolean
    + hashCode(): int
}

class Bot {
    - model: GameModel
    + botTurn()
    + Bot(Piece, int, GameModel):
}

class BoardPanel {
    - board: Board
    - dice: Dice
    - squares: ArrayList<JPanel>
    - diceRollPane: JTextPane
    - {static} JAIL int

    + BoardPanel(Board, Dice):
    + getSquares(): ArrayList<JPanel>
    + getDiceRollPane(): JTextPane
    - findPropertyPanel(Property)
    + update(MonopolyEvent)
    - playersOnSquare(GameBoardSquare): String
    - updatePlayerPositionSquare(GameModel):
    - findPropertyPanel(Property): PropertyPanel

}

class Board {

    - board: List<GameBoardSquare>
    - tagContent: StringBuffer
    - tempSquare: GameBoardSquare

    + Board():
    + addSquare(GameBoardSquare): void
    + getSize(): int
    + getSquare(int): GameBoardSquare
    + getBoard(): List<GameBoardSquare>
    - getPropertyTypeFromString(String): PropertyType
    - getSquareTypeFromString(String): SquareType
    + startDocument():
    + startElement(String, String, String, Attributes):
    + endElement(String,String,String):
    + characters(char[],int,int):
    + endDocument():
}

class GameModel {
    - {static} MAXNUMPLAYERS: int = 4
    - {static} STARTINGBALANCE: int = 1500
    - counter: int
    - board: Board
    - dice: Dice
    - gameOver: Boolean
    - players: List<Player>
    - curPlayer: Player
    - views: List<GameView>
    - jailTurns: int
    - jailBailAmount: int
    - passGoAmount: int
    - tax: int
    - inJail: int
    - fileName: String
    - gameSaved: boolean

    + GameModel():
    + initializeGame(): void
    + getCurrentPlayer(): Player
    + getGameOver(): Boolean
    + nextTurn(): void
    + win(): void
    + getBoard(): Board
    + {static} getSTARTINGBALANCE(): int
    + getDice(): Dice
    + addGameView(GameView): void
    + removeGameView(GameView): void
    + buyProperty(Property): void
    + movePlayer(): void
    + getPlayers(): List<Player>
    + getNumBots(): int
    + setNumBots(int):
    + addBot():
    + removeBot()

    + save():
    + loadGame():
    + isGameSaved(): boolean
    + setGameSaved(boolean):
    + importFile(String):
    - handleLandedSquare(int,GameBoardSquare):
    - handlePassGo():
    - handleInJail():

}

class Property {
    - colourSetSize: int
    - cost: int
    - buildingCost: int
    - rent: int
    - owner: Player
    - propertyType: PropertyType
    - numBuildings: int

    + Property(String, int, int, PropertyType):
    + Property():
    + buildingPurchased(): void
    + setColourSetSize(int):
    + getColourSetSize(): int
    + setCost(int):
    + getCost(): int
    + getBuildingCost(): int
    + setRent(int):
    + getRent(): int
    + getOwner(): Player
    + getPropertyType(): PropertyType
    + setPropertyType(PropertyType):
    + getNumBuildings(): int
    + removeOwner(): void
    + setOwner(Player): void
    + toString(): String
    + equals(Object): boolean
    + hashCode(): int
}

class GameFrame {
    - ROLL: int
    - NEXT_TURN: int
    - BUY: int
    - NEW_GAME: int
    - BUY_BUILDING: int
    - ADD_BOT: int
    - REMOVE_BOT: int
    - board: BoardPanel
    - contentPane: JPanel
    - playerPanels: PlayerPanel[]
    - eventView: JLabel
    - numPlayers: int
    - buttons: ArrayList<JButton>
    - model: GameModel
    - {static} bgColour: Color = Color.PINK

    + GameFrame():
    + addButton(String,String,JPanel,ActionListener,JPanel):
    - handleJail():
    - updatePlayerMoney(Player):
    - updatePlayerPosition(Player):
    - handleGameOver():
    - gameInitialization():
    - handleRentOccurrance(Player,GameBoardSquare):
    - handlePotentialDoubles():
    + update(MonopolyEvent):
    - gameLoad():
}

interface GameView {
    + update(MonopolyEvent): void
}

class PlayerPanel {
    - pieceLabel: JLabel
    - moneyLabel: JLabel
    - curPosLabel: JLabel
    - playerPiece: Piece
    - properties: List<String>

    + PlayerPanel():
    + setPlayerPiece(Piece): void
    + getPlayerPiece(): Piece
    + addProperty(String): void
    + setPiece(String): void
    + setMoney(int): void
    + setCurPos(int): void
}

class SpecialSquarePanel {
    ~ GameBoardSquare specialSquare
    ~ JButton specialSquarePopUp
    - {static} EMPTY: String
    - {static} GO: String
    - {static} GOTOJAIL: String
    - {static} JAIL: String
    - {static} FREEPARKING: String
    - {static} TAX: String
    + getSpecialSquarePopUp(): JButton
}


java.awt.event.ActionListener <|.. GameController
JPanel <|-- PropertyPanel
java.util.EventObject <|-- MonopolyEvent
JPanel <|-- BoardPanel
GameBoardSquare <|-- Property
GameView <|.. GameFrame
JFrame <|-- GameFrame
JPanel <|-- PlayerPanel
JPanel <|-- SpecialSquarePanel

java.io.Serializable <|.. Dice
java.io.Serializable <|.. Player
java.io.Serializable <|.. GameBoardSquare
java.io.Serializable <|.. Bot
java.io.Serializable <|.. SpecialSquare
java.io.Serializable <|.. Property
java.io.Serializable <|.. Board
Player "n" --* GameModel
GameModel o-- GameView
GameModel o-- "1" Dice
GameModel *-- "1" Board

Property -|> GameBoardSquare
Property *-- "1" PropertyType
Property o-- "1" Player

Player *-- "1" Piece
Player o-- "n" Property
Player <|-- Bot

Board *-- "40" GameBoardSquare
org.xml.sax.helpers.DefaultHandler <|-- Board

SpecialSquare --up|> GameBoardSquare

PropertyPanel *-- GameBoardSquare

GameBoardSquare *-- SquareType

GameController *-- GameModel

GameModel ..> MonopolyEvent

GameFrame <-- GameView
GameFrame o-- "n" PlayerPanel
GameFrame o-- "1" BoardPanel
GameFrame *-- "1" GameModel

SpecialSquarePanel *-- "1" SpecialSquare

PlayerPanel o-- "1" Piece

@enduml