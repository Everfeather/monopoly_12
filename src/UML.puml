@startuml

'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0


Property -|> GameBoardSquare
Property *-- "1" PropertyType

Player *-- "1" Piece

GameController o-- "1" Board
GameController o-- "n" Player
GameController o-- "2" Die

Board *-- "40" GameBoardSquare

SpecialSquare --up|> GameBoardSquare

GameBoardSquare *-- "1" SquareType

enum Piece{
    -HORSE,SHOE,CAR,BOAT
}

enum PropertyType{
    -BROWN,LIGHTBLUE,PINK,ORANGE,RED,YELLOW,GREEN,BLUE,RAILROAD,UTILITY
}

enum SquareType{
    -PROPERTY,GO,FREEPARKING,JAIL,GOTOJAIL,TAX,EMPTY
}

class Player{
    - playerPiece: Piece
    - balance: int
    - properties: HashMap<Property,PropertyType>
    - currentPos: int
    - inJail: Boolean
    - turnsInJail: int
    - bankrupt: boolean

    + Player(Piece, int):
    + getPlayerPiece(): Piece
    + setPlayerPiece(Piece):
    + getBalance(): int
    + increaseBalance(int):
    + decreaseBalance(int):
    + getProperties(): HashMap<Property, PropertyType>
    + getCurrentPos(): int
    + setCurrentPos(int):
    + getInJail(): boolean
    + setInJail(boolean):
    + getTurnsInJail(): int
    + setTurnsInJail(int):
    + isBankrupt(): boolean
    + setBankrupt(boolean):
    + hasPropertySet(Property): boolean
    + addProperty(Property):
}

class Die{
    - {static} MAX: int = 6
    - {static} MIN: int = 1
    -rollValue: int
    +Die():
    +roll()
    +getRollValue()
}

class Board{
    - {static} BOARDSIZE: int = 40
    - board: gameBoardSquare[]

    + Board():
    + addSquare():
    + getSize(): int
    + getSquare(int): GameBoardSquare
    + getBoard(): List<GameBoardSquare>
}

class GameController{
    - {static} MAXNUMPLAYERS: int = 4
    - {static} STARTINGBALANCE: int = 1500
    - counter: int
    - curPlayer Player
    -board Board
    -dice Die[2]
    -in: Scanner
    -players: List<Player>

    +GameController()
    +run(): boolean
    +initializePlayers():
    +turn(): Player
    +rollDice(): int
    `+jailTurn():
    `+passGo():
    +buyProperty(Player, Property):
    `+void buyBuilding()
    +payRent():
    `+void payTax()
    +goneBankrupt():
    +win():
    +printBoardState():

}

abstract class GameBoardSquare{
    -type: SquareType
    -name: String

    + GameBoardSquare(SquareType, String):
    + getName(): String
    + toString(): String

}

class Property {
    - colourSetSize: int
    - cost: int
    - buildingCost: int
    - rent: int
    - owner: Player
    - propertyType: PropertyType
    - numBuildings: int

    + Property(String, int, int, PropertyType):
    + buildingPurchased():
    + getColourSize(): int
    + getCost(): int
    + getBuildingCost(): int
    + getRent(): int
    + getOwner(): Player
    + getPropertyType(): PropertyType
    + getNumBuildings(): int
    + setNull():
    + toString(): String


}

class SpecialSquare{
    + SpecialSquare(String, SquareType)

}

'class View{
'    +void printGameState()
'}
@enduml